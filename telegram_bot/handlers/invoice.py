from aiogram import Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from state.StoreInvoiceState import StoreInvoiceState
from utils.clear_messages import clear
from keyboards.start_create_invoice_keyboard import create_kb
from aiogram.types import Message
from utils.api import get_cart, create_invoice, get_invoice, mark_invoice_as_paid, get_paid_invoices, mark_invoice_as_sent, get_cities
from actions.generate_invoice_text import generate, generate_for_admin, generate_for_shipping
from config import ADMIN_ID
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.cities_keyboard import create_kb as create_cities_kb


async def start_create(update: CallbackQuery, bot: Bot):
    await update.answer()
    await clear(update, bot)

    message = (f"<b>–°–î–≠–ö –¥–æ—Å—Ç–∞–≤–∫–∞ </b>\n\n"
    f"–î–æ—Å—Ç–∞–≤–∫–∞ –†–§ –∏ –°–ù–ì\n\n"
    # f"–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n"
    f"<b>–ó–∞–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ —Å—É–±–±–æ—Ç–∞–º</b>\n\n"
    # f"<b>–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä–µ—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã</b> (–Ω–µ —Å—á–∏—Ç–∞—è –≤—ã—Ö–æ–¥–Ω—ã—Ö).\n\n"
    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n"
    f"–¢–∞–∫–∂–µ <b>–≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏.</b>\n\n"
    f"<b>–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:</b> @celestialwordlove\n\n")

    await bot.send_message(
        chat_id=update.from_user.id,
        text=message,
        reply_markup=create_kb(),
        parse_mode='HTML'
    )

async def create_city(update: CallbackQuery, bot: Bot, state: FSMContext):
    await update.answer()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —Å–∫–∏–Ω—É—Ç—å –≥–æ—Ä–æ–¥
    message = (
        f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞\n\n"

        f"–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≥–æ—Ä–æ–¥</b> –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
    )

    await bot.send_message(
        chat_id=update.from_user.id,
        text=message,
        parse_mode='HTML'
    )
    await state.set_state(StoreInvoiceState.regCity)

async def store_city(update: Message, bot: Bot, state: FSMContext):
    await clear(update, bot)
    
    city = update.text
    
    cities = get_cities(city)

    message = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–≤–æ–π –≥–æ—Ä–æ–¥:\n\n"
        f"–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ." 
        f"\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ '–ü–∏—Ç–µ—Ä', –∞ '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'</i>"
    )

    await bot.send_message(
        chat_id=update.from_user.id,
        text=message,
        reply_markup=create_cities_kb(cities),
        parse_mode='HTML'
    )


async def create_data(update: CallbackQuery, bot: Bot, state: FSMContext):
    await clear(update, bot)

    await state.update_data(city_code=update.data.split('_')[1])
    
    message = (
        f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞\n\n"

        f"–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"

        f"<b>"
        f"–§–ò–û (–∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ)\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –ø–ª—é—Å–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã),\n"
        f"–ê–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥)\n\n"
        f"</b>"

        f"–ü—Ä–∏–º–µ—Ä:\n\n"

        f"<b>"
        f"–ü—É–ø–∫–∏–Ω –í–∞—Å–∏–ª–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á\n"
        f"375447191945\n"
        f"–ë–µ–ª–∞—Ä—É—Å—å, –ì–æ–º–µ–ª—å, —É–ª. –ò–ª—å–∏—á–∞, 26\n\n"
        f"</b>"
        f"‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ, —è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É"
    )

    await bot.send_message(
        chat_id=update.from_user.id,
        text=message,
        parse_mode='HTML'
    )
    await state.set_state(StoreInvoiceState.regData)

async def store(update: Message, state: FSMContext, bot: Bot):
    lines = update.text.split('\n')

    if len(lines) != 3:
        await bot.send_message(
            update.from_user.id,
            f'‚ùóÔ∏è –ü–æ—Ö–æ–∂–µ —Ç—ã –≤–≤–µ–ª –Ω–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–≤–µ–ª –∏—Ö –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'
        )
        return    

    fio_parts = lines[0].split()

    last_name = fio_parts[0]
    first_name = fio_parts[1]
    middle_name = fio_parts[2]
    
    phone = lines[1].strip()
    
    address = lines[2].strip()
    
    cart = get_cart(update.from_user.id)
    response = create_invoice(
        cart['id'],
        first_name,
        last_name,
        middle_name,
        address,
        phone
    )

    if response.status_code == 201:
        await state.set_state(StoreInvoiceState.waitingForPayment) 
        await clear(update, bot)

        invoice = response.json()['data']
        
        await bot.send_message(
            chat_id=update.from_user.id,
            text=generate(invoice),
            parse_mode='HTML'
        )
        return;

    await bot.send_message(
        chat_id=update.from_user.id,
        text=f"‚ùóÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}"
    )


async def pay(update: Message, state: FSMContext, bot: Bot):
    
    invoice = get_invoice(update.from_user.id)

    message = generate_for_admin(invoice)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"mark_paid_invoice:{invoice['id']}")]
    ])

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

    await bot.forward_message(
        chat_id=ADMIN_ID,
        from_chat_id=update.chat.id,
        message_id=update.message_id
    )

    await clear(update, bot)

    await bot.send_message(
        chat_id=update.from_user.id,
        text=f"–û—Ç–ª–∏—á–Ω–æ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–ø–ª–∞—Ç—É. –°–∫–æ—Ä–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    )

    await state.clear()

async def mark_paid(update: CallbackQuery, bot: Bot):
    update.answer()

    invoice_id = int(update.data.split(":")[1])
    mark_invoice_as_paid(invoice_id)

    await bot.send_message(
        chat_id=update.from_user.id,
        text=f"–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π. –û–Ω –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏. \n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /to_ship –≤ —ç—Ç–æ—Ç —á–∞—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    )

async def get_paid(update: Message, bot: Bot):

    if int(update.from_user.id) != int(ADMIN_ID):
        return

    invoices = get_paid_invoices()

    if len(invoices) == 0:
        await bot.send_message(
            chat_id=update.from_user.id,
            text=f"–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏"
        )
        return

    await bot.send_message(
        chat_id=update.from_user.id,
        text=f"–ó–∞–∫–∞–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏:"
    )

    for invoice in invoices:
        message = generate_for_shipping(invoice)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º", callback_data=f"mark_sent_invoice:{invoice['id']}")]
        ])

        await bot.send_message(
            chat_id=update.from_user.id,
            text=message,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    await bot.send_message(
        chat_id=update.from_user.id,
        text="–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n<b>/send {id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è} {—Ç–µ–∫—Å—Ç}</b>\n\n—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞",
        parse_mode='HTML',
    )

async def mark_as_sent(update: CallbackQuery, bot: Bot):
    await update.answer()

    id = update.data.split(":")[1]
    response = mark_invoice_as_sent(id)

    if response.status_code != 200:
        await bot.send_message(
            chat_id=update.from_user.id,
            text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π"
        )
        return

    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", callback_data="none")]
    ])

    await bot.edit_message_reply_markup(
        chat_id=update.from_user.id,
        message_id=update.message.message_id,
        reply_markup=new_keyboard
    )
    