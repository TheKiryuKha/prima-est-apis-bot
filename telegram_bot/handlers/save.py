from aiogram import Bot
from aiogram.types import Message
from config import ADMIN_ID
from aiogram.fsm.context import FSMContext
from state.StoreProductState import StoreProductState
from utils.clear_messages import clear
import re
from typing import Dict, Any
from utils.api import create_product


async def create(update: Message, bot: Bot, state: FSMContext):
    await clear(update, bot)

    if str(update.from_user.id) != str(ADMIN_ID):
        await bot.send_message(
            chat_id=update.from_user.id,
            text=f'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã'
        ) 
        return
    
    await bot.send_message(
        chat_id=update.from_user.id,
        text=f"–û–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"
    )
    await state.set_state(StoreProductState.regData)

async def store(update: Message, bot: Bot, state: FSMContext):
    product = await parse_product_message(update, bot)
    response = create_product(product)

    if response.status_code != 201:
        print(response.content)
        await bot.send_message(
            chat_id=update.from_user.id,
            text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        return
    
    await update.delete()
    await state.clear()

    await bot.send_message(
        chat_id=update.from_user.id,
        text=f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω"
    )



async def parse_product_message(message: Message, bot: Bot) -> Dict[str, Any]:
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_url = None
    if message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = await bot.get_file(photo.file_id)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        image_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
    text = message.caption or message.text or ""
    
    result = {
        "image_link": image_url,
        "title": "",
        "category_title": "",
        "description": "",
        "options": []
    }
    
    if not text:
        return result
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    
    if not lines:
        return result
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result["title"] = lines[0]
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if len(lines) > 1:
        result["category_title"] = lines[1]
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—â–µ–º –Ω–∞—á–∞–ª–æ –æ–ø—Ü–∏–π
    description_lines = []
    options_start_index = None
    
    for i in range(2, len(lines)):
        line = lines[i]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–ø—Ü–∏–µ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç ‚Ä¢, | –∏ —Ü–µ–Ω—É)
        if '‚Ä¢' in line and '|' in line and any(char.isdigit() for char in line):
            options_start_index = i
            break
        description_lines.append(line)
    
    result["description"] = '\n'.join(description_lines).strip()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∏—Ö –Ω–∞—á–∞–ª–æ
    if options_start_index is not None:
        for i in range(options_start_index, len(lines)):
            line = lines[i]
            if '‚Ä¢' in line and '|' in line:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–ø—Ü–∏–µ–π
                option_data = parse_option_line(line)
                if option_data:
                    result["options"].append(option_data)
    
    return result

def parse_option_line(line: str) -> Dict[str, Any] | None:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –æ–ø—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–∞
    –ü—Ä–∏–º–µ—Ä—ã:
    ‚Ä¢ü´ô250 –º–ª | —Å—Ç–µ–∫–ª–æ | 590 —Ä.
    ‚Ä¢üçØ 200 –º–ª | –≥–ª–∏–Ω–∞ (–≥–æ—Ä—à–æ–∫) | 900 —Ä.
    ‚Ä¢ 100 –≥—Ä | –∫—Ä. –ø–∞–∫–µ—Ç | 750 —Ä.
    """
    try:
        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä ‚Ä¢ –∏ —ç–º–æ–¥–∑–∏
        clean_line = re.sub(r'^‚Ä¢\s*[^\w\s]*\s*', '', line.strip())
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ |
        parts = [part.strip() for part in clean_line.split('|')]
        
        if len(parts) < 4:
            return None
        
        volume = parts[0]  # "250 –º–ª", "100 –≥—Ä" –∏ —Ç.–¥.
        package_type = parts[1]  # "—Å—Ç–µ–∫–ª–æ", "–≥–ª–∏–Ω–∞ (–≥–æ—Ä—à–æ–∫)" –∏ —Ç.–¥.
        price_str = parts[2]  # "590 —Ä.", "1 400 —Ä." –∏ —Ç.–¥.
        weight = parts[3]

        # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É: —É–±–∏—Ä–∞–µ–º "—Ä.", –ø—Ä–æ–±–µ–ª—ã, –∏ –¥—Ä—É–≥–∏–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        price_clean = re.sub(r'[^\d]', '', price_str)
        
        if not price_clean:
            return None
        
        price = int(price_clean)
        
        return {
            "type": package_type,
            "price": price,
            "volume": volume,
            "weight": weight 
        }
    
    except (ValueError, IndexError, AttributeError):
        return None
